{"ast":null,"code":"const express = require('express');\nconst bodyParser = require('body-parser');\nconst {\n  MongoClient,\n  ServerApiVersion\n} = require('mongodb');\nconst {\n  v4: uuidv4\n} = require('uuid');\nconst multer = require('multer');\nconst cors = require('cors');\nconst path = require('path');\nconst app = express();\nconst PORT = 3000;\n\n// Multer setup for file uploads\nconst storage = multer.diskStorage({\n  destination: function (req, file, cb) {\n    cb(null, 'uploads/');\n  },\n  filename: function (req, file, cb) {\n    cb(null, uuidv4() + '-' + file.originalname);\n  }\n});\nconst upload = multer({\n  storage: storage,\n  fileFilter: function (req, file, cb) {\n    if (!file.originalname.match(/\\.(jpg|jpeg|png|gif)$/)) {\n      return cb(new Error('Only image files are allowed!'), false);\n    }\n    cb(null, true);\n  }\n});\napp.use(cors());\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({\n  extended: true\n}));\napp.use('/uploads', express.static(path.join(__dirname, 'uploads')));\nconst uri = \"mongodb+srv://kishoreo:kishore@cropdelight.tcgopoi.mongodb.net/CropDelight?retryWrites=true&w=majority\";\nlet client;\n\n// Connect to MongoDB\nasync function connectToMongoDB() {\n  client = new MongoClient(uri, {\n    serverApi: {\n      version: ServerApiVersion.v1,\n      strict: true,\n      deprecationErrors: true\n    }\n  });\n  try {\n    await client.connect();\n    console.log(\"Connected to MongoDB\");\n  } catch (error) {\n    console.error(\"Error connecting to MongoDB\", error);\n    process.exit(1);\n  }\n}\nconnectToMongoDB();\n\n// Function to write user to the database\nasync function writeToDb(collectionName, data) {\n  try {\n    const database = client.db('crop_delight_db');\n    const collection = database.collection(collectionName);\n    const result = await collection.insertOne(data);\n    console.log(`New item inserted with the following id: ${result.insertedId}`);\n    return result;\n  } catch (error) {\n    console.error(\"Error writing to the database\", error);\n    throw error;\n  }\n}\n\n// Function to find item in the database\nasync function findItem(collectionName, query) {\n  try {\n    const database = client.db('crop_delight_db');\n    const collection = database.collection(collectionName);\n    const item = await collection.findOne(query);\n    return item;\n  } catch (error) {\n    console.error(\"Error finding item in the database\", error);\n    throw error;\n  }\n}\n\n// Register endpoint\napp.post('/register', upload.single('farmerLicense'), async (req, res) => {\n  const {\n    username,\n    password,\n    userType,\n    email,\n    phone,\n    addressStreet,\n    addressCity,\n    addressProvince,\n    addressZipCode\n  } = req.body;\n\n  // Base required fields\n  if (!username || !password || !userType || !email || !phone) {\n    return res.status(400).json({\n      message: 'Required fields are missing'\n    });\n  }\n  try {\n    // Check if username or email or phone already exists\n    const existingUser = await findItem('users', {\n      $or: [{\n        username\n      }, {\n        email\n      }, {\n        phone\n      }]\n    });\n    if (existingUser) {\n      const existingFields = [];\n      if (existingUser.username === username) existingFields.push('Username');\n      if (existingUser.email === email) existingFields.push('Email');\n      if (existingUser.phone === phone) existingFields.push('Phone Number');\n      return res.status(400).json({\n        message: `${existingFields.join(', ')} already exists`\n      });\n    }\n\n    // Prepare data based on user type\n    let userData = {\n      username,\n      password,\n      userType,\n      email,\n      phone\n    };\n    switch (userType) {\n      case 'Farmer':\n        const {\n          farmerName,\n          farmerId,\n          sameAddress\n        } = req.body;\n        const farmerLicensePath = req.file ? req.file.path : '';\n        if (!farmerName || !farmerId) {\n          return res.status(400).json({\n            message: 'Farmer details are missing'\n          });\n        }\n        if (!addressStreet || !addressCity || !addressProvince || !addressZipCode) {\n          return res.status(400).json({\n            message: 'Farmer address is required'\n          });\n        }\n        if (sameAddress === 'yes') {\n          // If sameAddress is true, copy farmerAddress to farmLocationAddress\n          userData = {\n            ...userData,\n            farmerName,\n            farmerId,\n            farmerLicense: farmerLicensePath,\n            farmerAddress: {\n              street: addressStreet,\n              city: addressCity,\n              province: addressProvince,\n              zipCode: addressZipCode\n            },\n            farmLocationAddress: {\n              street: addressStreet,\n              city: addressCity,\n              province: addressProvince,\n              zipCode: addressZipCode\n            }\n          };\n        } else {\n          // If sameAddress is false, use provided farmLocationAddress\n          const {\n            farmLocationStreet,\n            farmLocationCity,\n            farmLocationProvince,\n            farmLocationZipCode\n          } = req.body;\n          if (!farmLocationStreet || !farmLocationCity || !farmLocationProvince || !farmLocationZipCode) {\n            return res.status(400).json({\n              message: 'Farm Location Address is required when Same as Farm Location is No'\n            });\n          }\n          userData = {\n            ...userData,\n            farmerName,\n            farmerId,\n            farmerLicense: farmerLicensePath,\n            farmerAddress: {\n              street: addressStreet,\n              city: addressCity,\n              province: addressProvince,\n              zipCode: addressZipCode\n            },\n            farmLocationAddress: {\n              street: farmLocationStreet,\n              city: farmLocationCity,\n              province: farmLocationProvince,\n              zipCode: farmLocationZipCode\n            }\n          };\n        }\n        break;\n      case 'Customer':\n        const {\n          customerName,\n          shippingStreet,\n          shippingCity,\n          shippingProvince,\n          shippingZipCode\n        } = req.body;\n        if (!customerName || !shippingStreet || !shippingCity || !shippingProvince || !shippingZipCode) {\n          return res.status(400).json({\n            message: 'Customer name and shipping address are required'\n          });\n        }\n        userData = {\n          ...userData,\n          customerName,\n          shippingAddress: {\n            street: shippingStreet,\n            city: shippingCity,\n            province: shippingProvince,\n            zipCode: shippingZipCode\n          }\n        };\n        break;\n      case 'Worker':\n        const {\n          workerName,\n          communicationStreet,\n          communicationCity,\n          communicationProvince,\n          communicationZipCode,\n          skills\n        } = req.body;\n        if (!workerName || !communicationStreet || !communicationCity || !communicationProvince || !communicationZipCode || !skills) {\n          return res.status(400).json({\n            message: 'All Worker details are required'\n          });\n        }\n        userData = {\n          ...userData,\n          workerName,\n          communicationAddress: {\n            street: communicationStreet,\n            city: communicationCity,\n            province: communicationProvince,\n            zipCode: communicationZipCode\n          },\n          skills\n        };\n        break;\n      default:\n        return res.status(400).json({\n          message: 'Invalid user type'\n        });\n    }\n\n    // Insert user data into database\n    await writeToDb('users', userData);\n    return res.status(201).json({\n      message: 'Registration successful'\n    });\n  } catch (error) {\n    console.error('Error during registration:', error);\n    return res.status(500).json({\n      message: 'Internal server error'\n    });\n  }\n});\n\n// Login endpoint\napp.post('/login', async (req, res) => {\n  const {\n    username,\n    password\n  } = req.body;\n  if (!username || !password) {\n    return res.status(400).json({\n      message: 'Username and password are required'\n    });\n  }\n  try {\n    const user = await findItem('users', {\n      username\n    });\n    if (!user || user.password !== password) {\n      return res.status(401).json({\n        message: 'Invalid username or password'\n      });\n    }\n    res.status(200).json({\n      message: 'Login successful'\n    });\n  } catch (error) {\n    console.error(\"Error during login process\", error);\n    res.status(500).json({\n      message: 'Internal server error'\n    });\n  }\n});\n\n// Add product endpoint with file upload\napp.post('/product', upload.single('image'), async (req, res) => {\n  // Extract all fields from the request body\n  const {\n    productName,\n    price,\n    category,\n    username,\n    weight,\n    quantity,\n    description\n  } = req.body;\n  const imagePath = req.file ? req.file.path : '';\n\n  // Validate required fields\n  if (!productName || !price || !category || !username) {\n    return res.status(400).json({\n      message: 'Product name, price, category, and username are required'\n    });\n  }\n  try {\n    // Write all fields to the database\n    const result = await writeToDb('products', {\n      productName,\n      price,\n      category,\n      username,\n      imagePath,\n      weight,\n      quantity,\n      description\n      // Add other fields as needed\n    });\n    console.log(`New product inserted with the following id: ${result.insertedId}`);\n    res.status(200).json({\n      message: 'Product added successfully'\n    });\n  } catch (error) {\n    console.error(\"Error adding product to the database\", error);\n    res.status(500).json({\n      message: 'Internal server error'\n    });\n  }\n});\n\n// Fetch all products endpoint\napp.get('/products', async (req, res) => {\n  try {\n    const database = client.db('crop_delight_db');\n    const collection = database.collection('products');\n    const products = await collection.find({}).toArray();\n    res.status(200).json(products);\n  } catch (error) {\n    console.error(\"Error fetching products from the database\", error);\n    res.status(500).json({\n      message: 'Internal server error'\n    });\n  }\n});\n\n// Start the server\napp.listen(PORT, error => {\n  if (!error) {\n    console.log(\"Server is successfully running, and app is listening on port \" + PORT);\n  } else {\n    console.log(\"Error occurred, server can't start\", error);\n  }\n});","map":{"version":3,"names":["express","require","bodyParser","MongoClient","ServerApiVersion","v4","uuidv4","multer","cors","path","app","PORT","storage","diskStorage","destination","req","file","cb","filename","originalname","upload","fileFilter","match","Error","use","json","urlencoded","extended","static","join","__dirname","uri","client","connectToMongoDB","serverApi","version","v1","strict","deprecationErrors","connect","console","log","error","process","exit","writeToDb","collectionName","data","database","db","collection","result","insertOne","insertedId","findItem","query","item","findOne","post","single","res","username","password","userType","email","phone","addressStreet","addressCity","addressProvince","addressZipCode","body","status","message","existingUser","$or","existingFields","push","userData","farmerName","farmerId","sameAddress","farmerLicensePath","farmerLicense","farmerAddress","street","city","province","zipCode","farmLocationAddress","farmLocationStreet","farmLocationCity","farmLocationProvince","farmLocationZipCode","customerName","shippingStreet","shippingCity","shippingProvince","shippingZipCode","shippingAddress","workerName","communicationStreet","communicationCity","communicationProvince","communicationZipCode","skills","communicationAddress","user","productName","price","category","weight","quantity","description","imagePath","get","products","find","toArray","listen"],"sources":["G:/Project/Capst/Crop-Delight/src/Components/Register/RegisterPage.js"],"sourcesContent":["const express = require('express');\r\nconst bodyParser = require('body-parser');\r\nconst { MongoClient, ServerApiVersion } = require('mongodb');\r\nconst { v4: uuidv4 } = require('uuid');\r\nconst multer = require('multer');\r\nconst cors = require('cors');\r\nconst path = require('path');\r\n\r\nconst app = express();\r\nconst PORT = 3000;\r\n\r\n// Multer setup for file uploads\r\nconst storage = multer.diskStorage({\r\n  destination: function (req, file, cb) {\r\n    cb(null, 'uploads/');\r\n  },\r\n  filename: function (req, file, cb) {\r\n    cb(null, uuidv4() + '-' + file.originalname);\r\n  }\r\n});\r\nconst upload = multer({\r\n  storage: storage,\r\n  fileFilter: function (req, file, cb) {\r\n    if (!file.originalname.match(/\\.(jpg|jpeg|png|gif)$/)) {\r\n      return cb(new Error('Only image files are allowed!'), false);\r\n    }\r\n    cb(null, true);\r\n  }\r\n});\r\n\r\napp.use(cors());\r\napp.use(bodyParser.json());\r\napp.use(bodyParser.urlencoded({ extended: true }));\r\napp.use('/uploads', express.static(path.join(__dirname, 'uploads')));\r\n\r\nconst uri = \"mongodb+srv://kishoreo:kishore@cropdelight.tcgopoi.mongodb.net/CropDelight?retryWrites=true&w=majority\";\r\nlet client;\r\n\r\n// Connect to MongoDB\r\nasync function connectToMongoDB() {\r\n  client = new MongoClient(uri, {\r\n    serverApi: {\r\n      version: ServerApiVersion.v1,\r\n      strict: true,\r\n      deprecationErrors: true,\r\n    }\r\n  });\r\n\r\n  try {\r\n    await client.connect();\r\n    console.log(\"Connected to MongoDB\");\r\n  } catch (error) {\r\n    console.error(\"Error connecting to MongoDB\", error);\r\n    process.exit(1);\r\n  }\r\n}\r\n\r\nconnectToMongoDB();\r\n\r\n// Function to write user to the database\r\nasync function writeToDb(collectionName, data) {\r\n  try {\r\n    const database = client.db('crop_delight_db');\r\n    const collection = database.collection(collectionName);\r\n    const result = await collection.insertOne(data);\r\n    console.log(`New item inserted with the following id: ${result.insertedId}`);\r\n    return result;\r\n  } catch (error) {\r\n    console.error(\"Error writing to the database\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Function to find item in the database\r\nasync function findItem(collectionName, query) {\r\n  try {\r\n    const database = client.db('crop_delight_db');\r\n    const collection = database.collection(collectionName);\r\n    const item = await collection.findOne(query);\r\n    return item;\r\n  } catch (error) {\r\n    console.error(\"Error finding item in the database\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Register endpoint\r\napp.post('/register', upload.single('farmerLicense'), async (req, res) => {\r\n  const {\r\n    username,\r\n    password,\r\n    userType,\r\n    email,\r\n    phone,\r\n    addressStreet,\r\n    addressCity,\r\n    addressProvince,\r\n    addressZipCode\r\n  } = req.body;\r\n\r\n  // Base required fields\r\n  if (!username || !password || !userType || !email || !phone) {\r\n    return res.status(400).json({ message: 'Required fields are missing' });\r\n  }\r\n\r\n  try {\r\n    // Check if username or email or phone already exists\r\n    const existingUser = await findItem('users', { $or: [{ username }, { email }, { phone }] });\r\n    if (existingUser) {\r\n      const existingFields = [];\r\n      if (existingUser.username === username) existingFields.push('Username');\r\n      if (existingUser.email === email) existingFields.push('Email');\r\n      if (existingUser.phone === phone) existingFields.push('Phone Number');\r\n      return res.status(400).json({ message: `${existingFields.join(', ')} already exists` });\r\n    }\r\n\r\n    // Prepare data based on user type\r\n    let userData = { username, password, userType, email, phone };\r\n\r\n    switch (userType) {\r\n      case 'Farmer':\r\n        const { farmerName, farmerId, sameAddress } = req.body;\r\n        const farmerLicensePath = req.file ? req.file.path : '';\r\n\r\n        if (!farmerName || !farmerId) {\r\n          return res.status(400).json({ message: 'Farmer details are missing' });\r\n        }\r\n\r\n        if (!addressStreet || !addressCity || !addressProvince || !addressZipCode) {\r\n          return res.status(400).json({ message: 'Farmer address is required' });\r\n        }\r\n\r\n        if (sameAddress === 'yes') {\r\n          // If sameAddress is true, copy farmerAddress to farmLocationAddress\r\n          userData = {\r\n            ...userData,\r\n            farmerName,\r\n            farmerId,\r\n            farmerLicense: farmerLicensePath,\r\n            farmerAddress: {\r\n              street: addressStreet,\r\n              city: addressCity,\r\n              province: addressProvince,\r\n              zipCode: addressZipCode\r\n            },\r\n            farmLocationAddress: {\r\n              street: addressStreet,\r\n              city: addressCity,\r\n              province: addressProvince,\r\n              zipCode: addressZipCode\r\n            }\r\n          };\r\n        } else {\r\n          // If sameAddress is false, use provided farmLocationAddress\r\n          const { farmLocationStreet, farmLocationCity, farmLocationProvince, farmLocationZipCode } = req.body;\r\n\r\n          if (!farmLocationStreet || !farmLocationCity || !farmLocationProvince || !farmLocationZipCode) {\r\n            return res.status(400).json({ message: 'Farm Location Address is required when Same as Farm Location is No' });\r\n          }\r\n\r\n          userData = {\r\n            ...userData,\r\n            farmerName,\r\n            farmerId,\r\n            farmerLicense: farmerLicensePath,\r\n            farmerAddress: {\r\n              street: addressStreet,\r\n              city: addressCity,\r\n              province: addressProvince,\r\n              zipCode: addressZipCode\r\n            },\r\n            farmLocationAddress: {\r\n              street: farmLocationStreet,\r\n              city: farmLocationCity,\r\n              province: farmLocationProvince,\r\n              zipCode: farmLocationZipCode\r\n            }\r\n          };\r\n        }\r\n        break;\r\n\r\n      case 'Customer':\r\n        const { customerName, shippingStreet, shippingCity, shippingProvince, shippingZipCode } = req.body;\r\n\r\n        if (!customerName || !shippingStreet || !shippingCity || !shippingProvince || !shippingZipCode) {\r\n          return res.status(400).json({ message: 'Customer name and shipping address are required' });\r\n        }\r\n\r\n        userData = {\r\n          ...userData,\r\n          customerName,\r\n          shippingAddress: {\r\n            street: shippingStreet,\r\n            city: shippingCity,\r\n            province: shippingProvince,\r\n            zipCode: shippingZipCode\r\n          }\r\n        };\r\n        break;\r\n\r\n      case 'Worker':\r\n        const { workerName, communicationStreet, communicationCity, communicationProvince, communicationZipCode, skills } = req.body;\r\n\r\n        if (!workerName || !communicationStreet || !communicationCity || !communicationProvince || !communicationZipCode || !skills) {\r\n          return res.status(400).json({ message: 'All Worker details are required' });\r\n        }\r\n\r\n        userData = {\r\n          ...userData,\r\n          workerName,\r\n          communicationAddress: {\r\n            street: communicationStreet,\r\n            city: communicationCity,\r\n            province: communicationProvince,\r\n            zipCode: communicationZipCode\r\n          },\r\n          skills\r\n        };\r\n        break;\r\n\r\n      default:\r\n        return res.status(400).json({ message: 'Invalid user type' });\r\n    }\r\n\r\n    // Insert user data into database\r\n    await writeToDb('users', userData);\r\n    return res.status(201).json({ message: 'Registration successful' });\r\n\r\n  } catch (error) {\r\n    console.error('Error during registration:', error);\r\n    return res.status(500).json({ message: 'Internal server error' });\r\n  }\r\n});\r\n\r\n// Login endpoint\r\napp.post('/login', async (req, res) => {\r\n  const { username, password } = req.body;\r\n\r\n  if (!username || !password) {\r\n    return res.status(400).json({ message: 'Username and password are required' });\r\n  }\r\n\r\n  try {\r\n    const user = await findItem('users', { username });\r\n    if (!user || user.password !== password) {\r\n      return res.status(401).json({ message: 'Invalid username or password' });\r\n    }\r\n\r\n    res.status(200).json({ message: 'Login successful' });\r\n  } catch (error) {\r\n    console.error(\"Error during login process\", error);\r\n    res.status(500).json({ message: 'Internal server error' });\r\n  }\r\n});\r\n\r\n// Add product endpoint with file upload\r\napp.post('/product', upload.single('image'), async (req, res) => {\r\n  // Extract all fields from the request body\r\n  const { productName, price, category, username, weight, quantity, description } = req.body;\r\n  const imagePath = req.file ? req.file.path : '';\r\n\r\n  // Validate required fields\r\n  if (!productName || !price || !category || !username) {\r\n    return res.status(400).json({ message: 'Product name, price, category, and username are required' });\r\n  }\r\n\r\n  try {\r\n    // Write all fields to the database\r\n    const result = await writeToDb('products', {\r\n      productName,\r\n      price,\r\n      category,\r\n      username,\r\n      imagePath,\r\n      weight,\r\n      quantity,\r\n      description\r\n      // Add other fields as needed\r\n    });\r\n\r\n    console.log(`New product inserted with the following id: ${result.insertedId}`);\r\n    res.status(200).json({ message: 'Product added successfully' });\r\n  } catch (error) {\r\n    console.error(\"Error adding product to the database\", error);\r\n    res.status(500).json({ message: 'Internal server error' });\r\n  }\r\n});\r\n\r\n// Fetch all products endpoint\r\napp.get('/products', async (req, res) => {\r\n  try {\r\n    const database = client.db('crop_delight_db');\r\n    const collection = database.collection('products');\r\n    const products = await collection.find({}).toArray();\r\n    res.status(200).json(products);\r\n  } catch (error) {\r\n    console.error(\"Error fetching products from the database\", error);\r\n    res.status(500).json({ message: 'Internal server error' });\r\n  }\r\n});\r\n\r\n// Start the server\r\napp.listen(PORT, (error) => {\r\n  if (!error) {\r\n    console.log(\"Server is successfully running, and app is listening on port \" + PORT);\r\n  } else {\r\n    console.log(\"Error occurred, server can't start\", error);\r\n  }\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}